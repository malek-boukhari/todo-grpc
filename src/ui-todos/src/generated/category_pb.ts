// Important: Please make modifications in the proto files located in the root directory to ensure they take effect.
// Changes made in todos/src/proto and ui-todos/src/proto will be overwritten on build unless propagated to the root
// directory.

// @generated by protoc-gen-es v1.4.2 with parameter "target=ts"
// @generated from file category.proto (package category_package, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message category_package.Category
 */
export class Category extends Message<Category> {
  /**
   * @generated from field: string _id = 1;
   */
  Id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string color = 3;
   */
  color = "";

  /**
   * @generated from field: string user = 4;
   */
  user = "";

  constructor(data?: PartialMessage<Category>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "category_package.Category";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "color", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "user", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Category {
    return new Category().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Category {
    return new Category().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Category {
    return new Category().fromJsonString(jsonString, options);
  }

  static equals(a: Category | PlainMessage<Category> | undefined, b: Category | PlainMessage<Category> | undefined): boolean {
    return proto3.util.equals(Category, a, b);
  }
}

/**
 * @generated from message category_package.GetCategoriesRequest
 */
export class GetCategoriesRequest extends Message<GetCategoriesRequest> {
  /**
   * @generated from field: string userId = 1;
   */
  userId = "";

  constructor(data?: PartialMessage<GetCategoriesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "category_package.GetCategoriesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "userId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetCategoriesRequest {
    return new GetCategoriesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetCategoriesRequest {
    return new GetCategoriesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetCategoriesRequest {
    return new GetCategoriesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetCategoriesRequest | PlainMessage<GetCategoriesRequest> | undefined, b: GetCategoriesRequest | PlainMessage<GetCategoriesRequest> | undefined): boolean {
    return proto3.util.equals(GetCategoriesRequest, a, b);
  }
}

/**
 * @generated from message category_package.GetCategoriesResponse
 */
export class GetCategoriesResponse extends Message<GetCategoriesResponse> {
  /**
   * @generated from field: repeated category_package.Category categories = 1;
   */
  categories: Category[] = [];

  constructor(data?: PartialMessage<GetCategoriesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "category_package.GetCategoriesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "categories", kind: "message", T: Category, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetCategoriesResponse {
    return new GetCategoriesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetCategoriesResponse {
    return new GetCategoriesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetCategoriesResponse {
    return new GetCategoriesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetCategoriesResponse | PlainMessage<GetCategoriesResponse> | undefined, b: GetCategoriesResponse | PlainMessage<GetCategoriesResponse> | undefined): boolean {
    return proto3.util.equals(GetCategoriesResponse, a, b);
  }
}

/**
 * @generated from message category_package.CreateCategoryRequest
 */
export class CreateCategoryRequest extends Message<CreateCategoryRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string color = 2;
   */
  color = "";

  /**
   * @generated from field: string user = 3;
   */
  user = "";

  constructor(data?: PartialMessage<CreateCategoryRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "category_package.CreateCategoryRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "color", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "user", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateCategoryRequest {
    return new CreateCategoryRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateCategoryRequest {
    return new CreateCategoryRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateCategoryRequest {
    return new CreateCategoryRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateCategoryRequest | PlainMessage<CreateCategoryRequest> | undefined, b: CreateCategoryRequest | PlainMessage<CreateCategoryRequest> | undefined): boolean {
    return proto3.util.equals(CreateCategoryRequest, a, b);
  }
}

/**
 * @generated from message category_package.UpdateCategoryRequest
 */
export class UpdateCategoryRequest extends Message<UpdateCategoryRequest> {
  /**
   * @generated from field: string _id = 1;
   */
  Id = "";

  /**
   * @generated from field: category_package.Category category = 2;
   */
  category?: Category;

  constructor(data?: PartialMessage<UpdateCategoryRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "category_package.UpdateCategoryRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "category", kind: "message", T: Category },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateCategoryRequest {
    return new UpdateCategoryRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateCategoryRequest {
    return new UpdateCategoryRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateCategoryRequest {
    return new UpdateCategoryRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateCategoryRequest | PlainMessage<UpdateCategoryRequest> | undefined, b: UpdateCategoryRequest | PlainMessage<UpdateCategoryRequest> | undefined): boolean {
    return proto3.util.equals(UpdateCategoryRequest, a, b);
  }
}

/**
 * @generated from message category_package.DeleteCategoryRequest
 */
export class DeleteCategoryRequest extends Message<DeleteCategoryRequest> {
  /**
   * @generated from field: string _id = 1;
   */
  Id = "";

  constructor(data?: PartialMessage<DeleteCategoryRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "category_package.DeleteCategoryRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteCategoryRequest {
    return new DeleteCategoryRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteCategoryRequest {
    return new DeleteCategoryRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteCategoryRequest {
    return new DeleteCategoryRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteCategoryRequest | PlainMessage<DeleteCategoryRequest> | undefined, b: DeleteCategoryRequest | PlainMessage<DeleteCategoryRequest> | undefined): boolean {
    return proto3.util.equals(DeleteCategoryRequest, a, b);
  }
}

/**
 * @generated from message category_package.DeleteCategoryResponse
 */
export class DeleteCategoryResponse extends Message<DeleteCategoryResponse> {
  /**
   * @generated from field: bool success = 1;
   */
  success = false;

  constructor(data?: PartialMessage<DeleteCategoryResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "category_package.DeleteCategoryResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "success", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteCategoryResponse {
    return new DeleteCategoryResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteCategoryResponse {
    return new DeleteCategoryResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteCategoryResponse {
    return new DeleteCategoryResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteCategoryResponse | PlainMessage<DeleteCategoryResponse> | undefined, b: DeleteCategoryResponse | PlainMessage<DeleteCategoryResponse> | undefined): boolean {
    return proto3.util.equals(DeleteCategoryResponse, a, b);
  }
}

