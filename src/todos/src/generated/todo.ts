/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.12.4
 * source: todo.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace todo_package {
    export enum TodoPriority {
        TODO_PRIORITY_UNKNOWN = 0,
        TODO_PRIORITY_LOW = 1,
        TODO_PRIORITY_MEDIUM = 2,
        TODO_PRIORITY_HIGH = 3
    }
    export enum TodoStatus {
        TODO_STATUS_UNKNOWN = 0,
        TODO_STATUS_NEW = 1,
        TODO_STATUS_IN_PROGRESS = 2,
        TODO_STATUS_DONE = 3
    }
    export class Todo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            _id?: string;
            title?: string;
            task?: string;
            updatedBy?: string;
            status?: TodoStatus;
            priority?: TodoPriority;
            createdAt?: string;
            updatedAt?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("_id" in data && data._id != undefined) {
                    this._id = data._id;
                }
                if ("title" in data && data.title != undefined) {
                    this.title = data.title;
                }
                if ("task" in data && data.task != undefined) {
                    this.task = data.task;
                }
                if ("updatedBy" in data && data.updatedBy != undefined) {
                    this.updatedBy = data.updatedBy;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("priority" in data && data.priority != undefined) {
                    this.priority = data.priority;
                }
                if ("createdAt" in data && data.createdAt != undefined) {
                    this.createdAt = data.createdAt;
                }
                if ("updatedAt" in data && data.updatedAt != undefined) {
                    this.updatedAt = data.updatedAt;
                }
            }
        }
        get _id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set _id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get title() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set title(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get task() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set task(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get updatedBy() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set updatedBy(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 5, TodoStatus.TODO_STATUS_UNKNOWN) as TodoStatus;
        }
        set status(value: TodoStatus) {
            pb_1.Message.setField(this, 5, value);
        }
        get priority() {
            return pb_1.Message.getFieldWithDefault(this, 6, TodoPriority.TODO_PRIORITY_UNKNOWN) as TodoPriority;
        }
        set priority(value: TodoPriority) {
            pb_1.Message.setField(this, 6, value);
        }
        get createdAt() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set createdAt(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get updatedAt() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set updatedAt(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        static fromObject(data: {
            _id?: string;
            title?: string;
            task?: string;
            updatedBy?: string;
            status?: TodoStatus;
            priority?: TodoPriority;
            createdAt?: string;
            updatedAt?: string;
        }): Todo {
            const message = new Todo({});
            if (data._id != null) {
                message._id = data._id;
            }
            if (data.title != null) {
                message.title = data.title;
            }
            if (data.task != null) {
                message.task = data.task;
            }
            if (data.updatedBy != null) {
                message.updatedBy = data.updatedBy;
            }
            if (data.status != null) {
                message.status = data.status;
            }
            if (data.priority != null) {
                message.priority = data.priority;
            }
            if (data.createdAt != null) {
                message.createdAt = data.createdAt;
            }
            if (data.updatedAt != null) {
                message.updatedAt = data.updatedAt;
            }
            return message;
        }
        toObject() {
            const data: {
                _id?: string;
                title?: string;
                task?: string;
                updatedBy?: string;
                status?: TodoStatus;
                priority?: TodoPriority;
                createdAt?: string;
                updatedAt?: string;
            } = {};
            if (this._id != null) {
                data._id = this._id;
            }
            if (this.title != null) {
                data.title = this.title;
            }
            if (this.task != null) {
                data.task = this.task;
            }
            if (this.updatedBy != null) {
                data.updatedBy = this.updatedBy;
            }
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.priority != null) {
                data.priority = this.priority;
            }
            if (this.createdAt != null) {
                data.createdAt = this.createdAt;
            }
            if (this.updatedAt != null) {
                data.updatedAt = this.updatedAt;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this._id.length)
                writer.writeString(1, this._id);
            if (this.title.length)
                writer.writeString(2, this.title);
            if (this.task.length)
                writer.writeString(3, this.task);
            if (this.updatedBy.length)
                writer.writeString(4, this.updatedBy);
            if (this.status != TodoStatus.TODO_STATUS_UNKNOWN)
                writer.writeEnum(5, this.status);
            if (this.priority != TodoPriority.TODO_PRIORITY_UNKNOWN)
                writer.writeEnum(6, this.priority);
            if (this.createdAt.length)
                writer.writeString(7, this.createdAt);
            if (this.updatedAt.length)
                writer.writeString(8, this.updatedAt);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Todo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Todo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message._id = reader.readString();
                        break;
                    case 2:
                        message.title = reader.readString();
                        break;
                    case 3:
                        message.task = reader.readString();
                        break;
                    case 4:
                        message.updatedBy = reader.readString();
                        break;
                    case 5:
                        message.status = reader.readEnum();
                        break;
                    case 6:
                        message.priority = reader.readEnum();
                        break;
                    case 7:
                        message.createdAt = reader.readString();
                        break;
                    case 8:
                        message.updatedAt = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Todo {
            return Todo.deserialize(bytes);
        }
    }
    export class GetTodoRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            _id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("_id" in data && data._id != undefined) {
                    this._id = data._id;
                }
            }
        }
        get _id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set _id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            _id?: string;
        }): GetTodoRequest {
            const message = new GetTodoRequest({});
            if (data._id != null) {
                message._id = data._id;
            }
            return message;
        }
        toObject() {
            const data: {
                _id?: string;
            } = {};
            if (this._id != null) {
                data._id = this._id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this._id.length)
                writer.writeString(1, this._id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetTodoRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetTodoRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message._id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetTodoRequest {
            return GetTodoRequest.deserialize(bytes);
        }
    }
    export class GetTodosRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            taskId?: string;
            title?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("taskId" in data && data.taskId != undefined) {
                    this.taskId = data.taskId;
                }
                if ("title" in data && data.title != undefined) {
                    this.title = data.title;
                }
            }
        }
        get taskId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set taskId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get title() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set title(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            taskId?: string;
            title?: string;
        }): GetTodosRequest {
            const message = new GetTodosRequest({});
            if (data.taskId != null) {
                message.taskId = data.taskId;
            }
            if (data.title != null) {
                message.title = data.title;
            }
            return message;
        }
        toObject() {
            const data: {
                taskId?: string;
                title?: string;
            } = {};
            if (this.taskId != null) {
                data.taskId = this.taskId;
            }
            if (this.title != null) {
                data.title = this.title;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.taskId.length)
                writer.writeString(1, this.taskId);
            if (this.title.length)
                writer.writeString(2, this.title);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetTodosRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetTodosRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.taskId = reader.readString();
                        break;
                    case 2:
                        message.title = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetTodosRequest {
            return GetTodosRequest.deserialize(bytes);
        }
    }
    export class GetTodosResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            todos?: Todo[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("todos" in data && data.todos != undefined) {
                    this.todos = data.todos;
                }
            }
        }
        get todos() {
            return pb_1.Message.getRepeatedWrapperField(this, Todo, 1) as Todo[];
        }
        set todos(value: Todo[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            todos?: ReturnType<typeof Todo.prototype.toObject>[];
        }): GetTodosResponse {
            const message = new GetTodosResponse({});
            if (data.todos != null) {
                message.todos = data.todos.map(item => Todo.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                todos?: ReturnType<typeof Todo.prototype.toObject>[];
            } = {};
            if (this.todos != null) {
                data.todos = this.todos.map((item: Todo) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.todos.length)
                writer.writeRepeatedMessage(1, this.todos, (item: Todo) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetTodosResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetTodosResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.todos, () => pb_1.Message.addToRepeatedWrapperField(message, 1, Todo.deserialize(reader), Todo));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetTodosResponse {
            return GetTodosResponse.deserialize(bytes);
        }
    }
    export class CreateTodoRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            title?: string;
            task?: string;
            updatedBy?: string;
            status?: TodoStatus;
            priority?: TodoPriority;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("title" in data && data.title != undefined) {
                    this.title = data.title;
                }
                if ("task" in data && data.task != undefined) {
                    this.task = data.task;
                }
                if ("updatedBy" in data && data.updatedBy != undefined) {
                    this.updatedBy = data.updatedBy;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("priority" in data && data.priority != undefined) {
                    this.priority = data.priority;
                }
            }
        }
        get title() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set title(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get task() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set task(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get updatedBy() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set updatedBy(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 4, TodoStatus.TODO_STATUS_UNKNOWN) as TodoStatus;
        }
        set status(value: TodoStatus) {
            pb_1.Message.setField(this, 4, value);
        }
        get priority() {
            return pb_1.Message.getFieldWithDefault(this, 5, TodoPriority.TODO_PRIORITY_UNKNOWN) as TodoPriority;
        }
        set priority(value: TodoPriority) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            title?: string;
            task?: string;
            updatedBy?: string;
            status?: TodoStatus;
            priority?: TodoPriority;
        }): CreateTodoRequest {
            const message = new CreateTodoRequest({});
            if (data.title != null) {
                message.title = data.title;
            }
            if (data.task != null) {
                message.task = data.task;
            }
            if (data.updatedBy != null) {
                message.updatedBy = data.updatedBy;
            }
            if (data.status != null) {
                message.status = data.status;
            }
            if (data.priority != null) {
                message.priority = data.priority;
            }
            return message;
        }
        toObject() {
            const data: {
                title?: string;
                task?: string;
                updatedBy?: string;
                status?: TodoStatus;
                priority?: TodoPriority;
            } = {};
            if (this.title != null) {
                data.title = this.title;
            }
            if (this.task != null) {
                data.task = this.task;
            }
            if (this.updatedBy != null) {
                data.updatedBy = this.updatedBy;
            }
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.priority != null) {
                data.priority = this.priority;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.title.length)
                writer.writeString(1, this.title);
            if (this.task.length)
                writer.writeString(2, this.task);
            if (this.updatedBy.length)
                writer.writeString(3, this.updatedBy);
            if (this.status != TodoStatus.TODO_STATUS_UNKNOWN)
                writer.writeEnum(4, this.status);
            if (this.priority != TodoPriority.TODO_PRIORITY_UNKNOWN)
                writer.writeEnum(5, this.priority);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateTodoRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateTodoRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.title = reader.readString();
                        break;
                    case 2:
                        message.task = reader.readString();
                        break;
                    case 3:
                        message.updatedBy = reader.readString();
                        break;
                    case 4:
                        message.status = reader.readEnum();
                        break;
                    case 5:
                        message.priority = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateTodoRequest {
            return CreateTodoRequest.deserialize(bytes);
        }
    }
    export class UpdateTodoRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            _id?: string;
            todo?: Todo;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("_id" in data && data._id != undefined) {
                    this._id = data._id;
                }
                if ("todo" in data && data.todo != undefined) {
                    this.todo = data.todo;
                }
            }
        }
        get _id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set _id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get todo() {
            return pb_1.Message.getWrapperField(this, Todo, 2) as Todo;
        }
        set todo(value: Todo) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_todo() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            _id?: string;
            todo?: ReturnType<typeof Todo.prototype.toObject>;
        }): UpdateTodoRequest {
            const message = new UpdateTodoRequest({});
            if (data._id != null) {
                message._id = data._id;
            }
            if (data.todo != null) {
                message.todo = Todo.fromObject(data.todo);
            }
            return message;
        }
        toObject() {
            const data: {
                _id?: string;
                todo?: ReturnType<typeof Todo.prototype.toObject>;
            } = {};
            if (this._id != null) {
                data._id = this._id;
            }
            if (this.todo != null) {
                data.todo = this.todo.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this._id.length)
                writer.writeString(1, this._id);
            if (this.has_todo)
                writer.writeMessage(2, this.todo, () => this.todo.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateTodoRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateTodoRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message._id = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.todo, () => message.todo = Todo.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateTodoRequest {
            return UpdateTodoRequest.deserialize(bytes);
        }
    }
    export class DeleteTodoRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            _id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("_id" in data && data._id != undefined) {
                    this._id = data._id;
                }
            }
        }
        get _id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set _id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            _id?: string;
        }): DeleteTodoRequest {
            const message = new DeleteTodoRequest({});
            if (data._id != null) {
                message._id = data._id;
            }
            return message;
        }
        toObject() {
            const data: {
                _id?: string;
            } = {};
            if (this._id != null) {
                data._id = this._id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this._id.length)
                writer.writeString(1, this._id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteTodoRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteTodoRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message._id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteTodoRequest {
            return DeleteTodoRequest.deserialize(bytes);
        }
    }
    export class DeleteTodoResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            success?: boolean;
        }): DeleteTodoResponse {
            const message = new DeleteTodoResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteTodoResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteTodoResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteTodoResponse {
            return DeleteTodoResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedTodoServiceService {
        static definition = {
            GetTodo: {
                path: "/todo_package.TodoService/GetTodo",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetTodoRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetTodoRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: Todo) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => Todo.deserialize(new Uint8Array(bytes))
            },
            GetTodos: {
                path: "/todo_package.TodoService/GetTodos",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetTodosRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetTodosRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetTodosResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetTodosResponse.deserialize(new Uint8Array(bytes))
            },
            CreateTodo: {
                path: "/todo_package.TodoService/CreateTodo",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CreateTodoRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CreateTodoRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: Todo) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => Todo.deserialize(new Uint8Array(bytes))
            },
            UpdateTodo: {
                path: "/todo_package.TodoService/UpdateTodo",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UpdateTodoRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UpdateTodoRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: Todo) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => Todo.deserialize(new Uint8Array(bytes))
            },
            DeleteTodo: {
                path: "/todo_package.TodoService/DeleteTodo",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: DeleteTodoRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => DeleteTodoRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: DeleteTodoResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => DeleteTodoResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract GetTodo(call: grpc_1.ServerUnaryCall<GetTodoRequest, Todo>, callback: grpc_1.sendUnaryData<Todo>): void;
        abstract GetTodos(call: grpc_1.ServerUnaryCall<GetTodosRequest, GetTodosResponse>, callback: grpc_1.sendUnaryData<GetTodosResponse>): void;
        abstract CreateTodo(call: grpc_1.ServerUnaryCall<CreateTodoRequest, Todo>, callback: grpc_1.sendUnaryData<Todo>): void;
        abstract UpdateTodo(call: grpc_1.ServerUnaryCall<UpdateTodoRequest, Todo>, callback: grpc_1.sendUnaryData<Todo>): void;
        abstract DeleteTodo(call: grpc_1.ServerUnaryCall<DeleteTodoRequest, DeleteTodoResponse>, callback: grpc_1.sendUnaryData<DeleteTodoResponse>): void;
    }
    export class TodoServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedTodoServiceService.definition, "TodoService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        GetTodo: GrpcUnaryServiceInterface<GetTodoRequest, Todo> = (message: GetTodoRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Todo>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Todo>, callback?: grpc_1.requestCallback<Todo>): grpc_1.ClientUnaryCall => {
            return super.GetTodo(message, metadata, options, callback);
        };
        GetTodos: GrpcUnaryServiceInterface<GetTodosRequest, GetTodosResponse> = (message: GetTodosRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetTodosResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetTodosResponse>, callback?: grpc_1.requestCallback<GetTodosResponse>): grpc_1.ClientUnaryCall => {
            return super.GetTodos(message, metadata, options, callback);
        };
        CreateTodo: GrpcUnaryServiceInterface<CreateTodoRequest, Todo> = (message: CreateTodoRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Todo>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Todo>, callback?: grpc_1.requestCallback<Todo>): grpc_1.ClientUnaryCall => {
            return super.CreateTodo(message, metadata, options, callback);
        };
        UpdateTodo: GrpcUnaryServiceInterface<UpdateTodoRequest, Todo> = (message: UpdateTodoRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Todo>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Todo>, callback?: grpc_1.requestCallback<Todo>): grpc_1.ClientUnaryCall => {
            return super.UpdateTodo(message, metadata, options, callback);
        };
        DeleteTodo: GrpcUnaryServiceInterface<DeleteTodoRequest, DeleteTodoResponse> = (message: DeleteTodoRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<DeleteTodoResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<DeleteTodoResponse>, callback?: grpc_1.requestCallback<DeleteTodoResponse>): grpc_1.ClientUnaryCall => {
            return super.DeleteTodo(message, metadata, options, callback);
        };
    }
}
