/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.12.4
 * source: user.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace user_package {
    export class Avatar extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            sex?: string;
            hairStyle?: string;
            hairColor?: string;
            faceColor?: string;
            eyeStyle?: string;
            earSize?: string;
            noseStyle?: string;
            mouthStyle?: string;
            glassesStyle?: string;
            hatStyle?: string;
            hatColor?: string;
            shirtStyle?: string;
            shirtColor?: string;
            bgColor?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("sex" in data && data.sex != undefined) {
                    this.sex = data.sex;
                }
                if ("hairStyle" in data && data.hairStyle != undefined) {
                    this.hairStyle = data.hairStyle;
                }
                if ("hairColor" in data && data.hairColor != undefined) {
                    this.hairColor = data.hairColor;
                }
                if ("faceColor" in data && data.faceColor != undefined) {
                    this.faceColor = data.faceColor;
                }
                if ("eyeStyle" in data && data.eyeStyle != undefined) {
                    this.eyeStyle = data.eyeStyle;
                }
                if ("earSize" in data && data.earSize != undefined) {
                    this.earSize = data.earSize;
                }
                if ("noseStyle" in data && data.noseStyle != undefined) {
                    this.noseStyle = data.noseStyle;
                }
                if ("mouthStyle" in data && data.mouthStyle != undefined) {
                    this.mouthStyle = data.mouthStyle;
                }
                if ("glassesStyle" in data && data.glassesStyle != undefined) {
                    this.glassesStyle = data.glassesStyle;
                }
                if ("hatStyle" in data && data.hatStyle != undefined) {
                    this.hatStyle = data.hatStyle;
                }
                if ("hatColor" in data && data.hatColor != undefined) {
                    this.hatColor = data.hatColor;
                }
                if ("shirtStyle" in data && data.shirtStyle != undefined) {
                    this.shirtStyle = data.shirtStyle;
                }
                if ("shirtColor" in data && data.shirtColor != undefined) {
                    this.shirtColor = data.shirtColor;
                }
                if ("bgColor" in data && data.bgColor != undefined) {
                    this.bgColor = data.bgColor;
                }
            }
        }
        get sex() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set sex(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get hairStyle() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set hairStyle(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get hairColor() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set hairColor(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get faceColor() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set faceColor(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get eyeStyle() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set eyeStyle(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get earSize() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set earSize(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get noseStyle() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set noseStyle(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get mouthStyle() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set mouthStyle(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get glassesStyle() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set glassesStyle(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        get hatStyle() {
            return pb_1.Message.getFieldWithDefault(this, 10, "") as string;
        }
        set hatStyle(value: string) {
            pb_1.Message.setField(this, 10, value);
        }
        get hatColor() {
            return pb_1.Message.getFieldWithDefault(this, 11, "") as string;
        }
        set hatColor(value: string) {
            pb_1.Message.setField(this, 11, value);
        }
        get shirtStyle() {
            return pb_1.Message.getFieldWithDefault(this, 12, "") as string;
        }
        set shirtStyle(value: string) {
            pb_1.Message.setField(this, 12, value);
        }
        get shirtColor() {
            return pb_1.Message.getFieldWithDefault(this, 13, "") as string;
        }
        set shirtColor(value: string) {
            pb_1.Message.setField(this, 13, value);
        }
        get bgColor() {
            return pb_1.Message.getFieldWithDefault(this, 14, "") as string;
        }
        set bgColor(value: string) {
            pb_1.Message.setField(this, 14, value);
        }
        static fromObject(data: {
            sex?: string;
            hairStyle?: string;
            hairColor?: string;
            faceColor?: string;
            eyeStyle?: string;
            earSize?: string;
            noseStyle?: string;
            mouthStyle?: string;
            glassesStyle?: string;
            hatStyle?: string;
            hatColor?: string;
            shirtStyle?: string;
            shirtColor?: string;
            bgColor?: string;
        }): Avatar {
            const message = new Avatar({});
            if (data.sex != null) {
                message.sex = data.sex;
            }
            if (data.hairStyle != null) {
                message.hairStyle = data.hairStyle;
            }
            if (data.hairColor != null) {
                message.hairColor = data.hairColor;
            }
            if (data.faceColor != null) {
                message.faceColor = data.faceColor;
            }
            if (data.eyeStyle != null) {
                message.eyeStyle = data.eyeStyle;
            }
            if (data.earSize != null) {
                message.earSize = data.earSize;
            }
            if (data.noseStyle != null) {
                message.noseStyle = data.noseStyle;
            }
            if (data.mouthStyle != null) {
                message.mouthStyle = data.mouthStyle;
            }
            if (data.glassesStyle != null) {
                message.glassesStyle = data.glassesStyle;
            }
            if (data.hatStyle != null) {
                message.hatStyle = data.hatStyle;
            }
            if (data.hatColor != null) {
                message.hatColor = data.hatColor;
            }
            if (data.shirtStyle != null) {
                message.shirtStyle = data.shirtStyle;
            }
            if (data.shirtColor != null) {
                message.shirtColor = data.shirtColor;
            }
            if (data.bgColor != null) {
                message.bgColor = data.bgColor;
            }
            return message;
        }
        toObject() {
            const data: {
                sex?: string;
                hairStyle?: string;
                hairColor?: string;
                faceColor?: string;
                eyeStyle?: string;
                earSize?: string;
                noseStyle?: string;
                mouthStyle?: string;
                glassesStyle?: string;
                hatStyle?: string;
                hatColor?: string;
                shirtStyle?: string;
                shirtColor?: string;
                bgColor?: string;
            } = {};
            if (this.sex != null) {
                data.sex = this.sex;
            }
            if (this.hairStyle != null) {
                data.hairStyle = this.hairStyle;
            }
            if (this.hairColor != null) {
                data.hairColor = this.hairColor;
            }
            if (this.faceColor != null) {
                data.faceColor = this.faceColor;
            }
            if (this.eyeStyle != null) {
                data.eyeStyle = this.eyeStyle;
            }
            if (this.earSize != null) {
                data.earSize = this.earSize;
            }
            if (this.noseStyle != null) {
                data.noseStyle = this.noseStyle;
            }
            if (this.mouthStyle != null) {
                data.mouthStyle = this.mouthStyle;
            }
            if (this.glassesStyle != null) {
                data.glassesStyle = this.glassesStyle;
            }
            if (this.hatStyle != null) {
                data.hatStyle = this.hatStyle;
            }
            if (this.hatColor != null) {
                data.hatColor = this.hatColor;
            }
            if (this.shirtStyle != null) {
                data.shirtStyle = this.shirtStyle;
            }
            if (this.shirtColor != null) {
                data.shirtColor = this.shirtColor;
            }
            if (this.bgColor != null) {
                data.bgColor = this.bgColor;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sex.length)
                writer.writeString(1, this.sex);
            if (this.hairStyle.length)
                writer.writeString(2, this.hairStyle);
            if (this.hairColor.length)
                writer.writeString(3, this.hairColor);
            if (this.faceColor.length)
                writer.writeString(4, this.faceColor);
            if (this.eyeStyle.length)
                writer.writeString(5, this.eyeStyle);
            if (this.earSize.length)
                writer.writeString(6, this.earSize);
            if (this.noseStyle.length)
                writer.writeString(7, this.noseStyle);
            if (this.mouthStyle.length)
                writer.writeString(8, this.mouthStyle);
            if (this.glassesStyle.length)
                writer.writeString(9, this.glassesStyle);
            if (this.hatStyle.length)
                writer.writeString(10, this.hatStyle);
            if (this.hatColor.length)
                writer.writeString(11, this.hatColor);
            if (this.shirtStyle.length)
                writer.writeString(12, this.shirtStyle);
            if (this.shirtColor.length)
                writer.writeString(13, this.shirtColor);
            if (this.bgColor.length)
                writer.writeString(14, this.bgColor);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Avatar {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Avatar();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sex = reader.readString();
                        break;
                    case 2:
                        message.hairStyle = reader.readString();
                        break;
                    case 3:
                        message.hairColor = reader.readString();
                        break;
                    case 4:
                        message.faceColor = reader.readString();
                        break;
                    case 5:
                        message.eyeStyle = reader.readString();
                        break;
                    case 6:
                        message.earSize = reader.readString();
                        break;
                    case 7:
                        message.noseStyle = reader.readString();
                        break;
                    case 8:
                        message.mouthStyle = reader.readString();
                        break;
                    case 9:
                        message.glassesStyle = reader.readString();
                        break;
                    case 10:
                        message.hatStyle = reader.readString();
                        break;
                    case 11:
                        message.hatColor = reader.readString();
                        break;
                    case 12:
                        message.shirtStyle = reader.readString();
                        break;
                    case 13:
                        message.shirtColor = reader.readString();
                        break;
                    case 14:
                        message.bgColor = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Avatar {
            return Avatar.deserialize(bytes);
        }
    }
    export class User extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            _id?: string;
            email?: string;
            username?: string;
            avatar?: Avatar;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("_id" in data && data._id != undefined) {
                    this._id = data._id;
                }
                if ("email" in data && data.email != undefined) {
                    this.email = data.email;
                }
                if ("username" in data && data.username != undefined) {
                    this.username = data.username;
                }
                if ("avatar" in data && data.avatar != undefined) {
                    this.avatar = data.avatar;
                }
            }
        }
        get _id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set _id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get email() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set email(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get username() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set username(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get avatar() {
            return pb_1.Message.getWrapperField(this, Avatar, 4) as Avatar;
        }
        set avatar(value: Avatar) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_avatar() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data: {
            _id?: string;
            email?: string;
            username?: string;
            avatar?: ReturnType<typeof Avatar.prototype.toObject>;
        }): User {
            const message = new User({});
            if (data._id != null) {
                message._id = data._id;
            }
            if (data.email != null) {
                message.email = data.email;
            }
            if (data.username != null) {
                message.username = data.username;
            }
            if (data.avatar != null) {
                message.avatar = Avatar.fromObject(data.avatar);
            }
            return message;
        }
        toObject() {
            const data: {
                _id?: string;
                email?: string;
                username?: string;
                avatar?: ReturnType<typeof Avatar.prototype.toObject>;
            } = {};
            if (this._id != null) {
                data._id = this._id;
            }
            if (this.email != null) {
                data.email = this.email;
            }
            if (this.username != null) {
                data.username = this.username;
            }
            if (this.avatar != null) {
                data.avatar = this.avatar.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this._id.length)
                writer.writeString(1, this._id);
            if (this.email.length)
                writer.writeString(2, this.email);
            if (this.username.length)
                writer.writeString(3, this.username);
            if (this.has_avatar)
                writer.writeMessage(4, this.avatar, () => this.avatar.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): User {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new User();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message._id = reader.readString();
                        break;
                    case 2:
                        message.email = reader.readString();
                        break;
                    case 3:
                        message.username = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.avatar, () => message.avatar = Avatar.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): User {
            return User.deserialize(bytes);
        }
    }
    export class RegisterRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            user?: RegisterRequest.RegisterFields;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("user" in data && data.user != undefined) {
                    this.user = data.user;
                }
            }
        }
        get user() {
            return pb_1.Message.getWrapperField(this, RegisterRequest.RegisterFields, 1) as RegisterRequest.RegisterFields;
        }
        set user(value: RegisterRequest.RegisterFields) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_user() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            user?: ReturnType<typeof RegisterRequest.RegisterFields.prototype.toObject>;
        }): RegisterRequest {
            const message = new RegisterRequest({});
            if (data.user != null) {
                message.user = RegisterRequest.RegisterFields.fromObject(data.user);
            }
            return message;
        }
        toObject() {
            const data: {
                user?: ReturnType<typeof RegisterRequest.RegisterFields.prototype.toObject>;
            } = {};
            if (this.user != null) {
                data.user = this.user.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_user)
                writer.writeMessage(1, this.user, () => this.user.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RegisterRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RegisterRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.user, () => message.user = RegisterRequest.RegisterFields.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RegisterRequest {
            return RegisterRequest.deserialize(bytes);
        }
    }
    export namespace RegisterRequest {
        export class RegisterFields extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                email?: string;
                username?: string;
                password?: string;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("email" in data && data.email != undefined) {
                        this.email = data.email;
                    }
                    if ("username" in data && data.username != undefined) {
                        this.username = data.username;
                    }
                    if ("password" in data && data.password != undefined) {
                        this.password = data.password;
                    }
                }
            }
            get email() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set email(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            get username() {
                return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
            }
            set username(value: string) {
                pb_1.Message.setField(this, 2, value);
            }
            get password() {
                return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
            }
            set password(value: string) {
                pb_1.Message.setField(this, 3, value);
            }
            static fromObject(data: {
                email?: string;
                username?: string;
                password?: string;
            }): RegisterFields {
                const message = new RegisterFields({});
                if (data.email != null) {
                    message.email = data.email;
                }
                if (data.username != null) {
                    message.username = data.username;
                }
                if (data.password != null) {
                    message.password = data.password;
                }
                return message;
            }
            toObject() {
                const data: {
                    email?: string;
                    username?: string;
                    password?: string;
                } = {};
                if (this.email != null) {
                    data.email = this.email;
                }
                if (this.username != null) {
                    data.username = this.username;
                }
                if (this.password != null) {
                    data.password = this.password;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.email.length)
                    writer.writeString(1, this.email);
                if (this.username.length)
                    writer.writeString(2, this.username);
                if (this.password.length)
                    writer.writeString(3, this.password);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RegisterFields {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RegisterFields();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.email = reader.readString();
                            break;
                        case 2:
                            message.username = reader.readString();
                            break;
                        case 3:
                            message.password = reader.readString();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): RegisterFields {
                return RegisterFields.deserialize(bytes);
            }
        }
    }
    export class LoginRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            email?: string;
            password?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("email" in data && data.email != undefined) {
                    this.email = data.email;
                }
                if ("password" in data && data.password != undefined) {
                    this.password = data.password;
                }
            }
        }
        get email() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set email(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get password() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set password(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            email?: string;
            password?: string;
        }): LoginRequest {
            const message = new LoginRequest({});
            if (data.email != null) {
                message.email = data.email;
            }
            if (data.password != null) {
                message.password = data.password;
            }
            return message;
        }
        toObject() {
            const data: {
                email?: string;
                password?: string;
            } = {};
            if (this.email != null) {
                data.email = this.email;
            }
            if (this.password != null) {
                data.password = this.password;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.email.length)
                writer.writeString(1, this.email);
            if (this.password.length)
                writer.writeString(2, this.password);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LoginRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LoginRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.email = reader.readString();
                        break;
                    case 2:
                        message.password = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LoginRequest {
            return LoginRequest.deserialize(bytes);
        }
    }
    export class LoginResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
            }
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            token?: string;
        }): LoginResponse {
            const message = new LoginResponse({});
            if (data.token != null) {
                message.token = data.token;
            }
            return message;
        }
        toObject() {
            const data: {
                token?: string;
            } = {};
            if (this.token != null) {
                data.token = this.token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.token.length)
                writer.writeString(1, this.token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LoginResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LoginResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LoginResponse {
            return LoginResponse.deserialize(bytes);
        }
    }
    export class GetUsersRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            userName?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("userName" in data && data.userName != undefined) {
                    this.userName = data.userName;
                }
            }
        }
        get userName() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set userName(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            userName?: string;
        }): GetUsersRequest {
            const message = new GetUsersRequest({});
            if (data.userName != null) {
                message.userName = data.userName;
            }
            return message;
        }
        toObject() {
            const data: {
                userName?: string;
            } = {};
            if (this.userName != null) {
                data.userName = this.userName;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.userName.length)
                writer.writeString(1, this.userName);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetUsersRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetUsersRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.userName = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetUsersRequest {
            return GetUsersRequest.deserialize(bytes);
        }
    }
    export class GetUsersResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            users?: User[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("users" in data && data.users != undefined) {
                    this.users = data.users;
                }
            }
        }
        get users() {
            return pb_1.Message.getRepeatedWrapperField(this, User, 1) as User[];
        }
        set users(value: User[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            users?: ReturnType<typeof User.prototype.toObject>[];
        }): GetUsersResponse {
            const message = new GetUsersResponse({});
            if (data.users != null) {
                message.users = data.users.map(item => User.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                users?: ReturnType<typeof User.prototype.toObject>[];
            } = {};
            if (this.users != null) {
                data.users = this.users.map((item: User) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.users.length)
                writer.writeRepeatedMessage(1, this.users, (item: User) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetUsersResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetUsersResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.users, () => pb_1.Message.addToRepeatedWrapperField(message, 1, User.deserialize(reader), User));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetUsersResponse {
            return GetUsersResponse.deserialize(bytes);
        }
    }
    export class UpdateUserRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            _id?: string;
            user?: User;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("_id" in data && data._id != undefined) {
                    this._id = data._id;
                }
                if ("user" in data && data.user != undefined) {
                    this.user = data.user;
                }
            }
        }
        get _id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set _id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get user() {
            return pb_1.Message.getWrapperField(this, User, 2) as User;
        }
        set user(value: User) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_user() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            _id?: string;
            user?: ReturnType<typeof User.prototype.toObject>;
        }): UpdateUserRequest {
            const message = new UpdateUserRequest({});
            if (data._id != null) {
                message._id = data._id;
            }
            if (data.user != null) {
                message.user = User.fromObject(data.user);
            }
            return message;
        }
        toObject() {
            const data: {
                _id?: string;
                user?: ReturnType<typeof User.prototype.toObject>;
            } = {};
            if (this._id != null) {
                data._id = this._id;
            }
            if (this.user != null) {
                data.user = this.user.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this._id.length)
                writer.writeString(1, this._id);
            if (this.has_user)
                writer.writeMessage(2, this.user, () => this.user.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateUserRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateUserRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message._id = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.user, () => message.user = User.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateUserRequest {
            return UpdateUserRequest.deserialize(bytes);
        }
    }
    export class SecurityFields extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            currentPassword?: string;
            newPassword?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("currentPassword" in data && data.currentPassword != undefined) {
                    this.currentPassword = data.currentPassword;
                }
                if ("newPassword" in data && data.newPassword != undefined) {
                    this.newPassword = data.newPassword;
                }
            }
        }
        get currentPassword() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set currentPassword(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get newPassword() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set newPassword(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            currentPassword?: string;
            newPassword?: string;
        }): SecurityFields {
            const message = new SecurityFields({});
            if (data.currentPassword != null) {
                message.currentPassword = data.currentPassword;
            }
            if (data.newPassword != null) {
                message.newPassword = data.newPassword;
            }
            return message;
        }
        toObject() {
            const data: {
                currentPassword?: string;
                newPassword?: string;
            } = {};
            if (this.currentPassword != null) {
                data.currentPassword = this.currentPassword;
            }
            if (this.newPassword != null) {
                data.newPassword = this.newPassword;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.currentPassword.length)
                writer.writeString(1, this.currentPassword);
            if (this.newPassword.length)
                writer.writeString(2, this.newPassword);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SecurityFields {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SecurityFields();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.currentPassword = reader.readString();
                        break;
                    case 2:
                        message.newPassword = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SecurityFields {
            return SecurityFields.deserialize(bytes);
        }
    }
    export class UpdatePasswordRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            _id?: string;
            security?: SecurityFields;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("_id" in data && data._id != undefined) {
                    this._id = data._id;
                }
                if ("security" in data && data.security != undefined) {
                    this.security = data.security;
                }
            }
        }
        get _id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set _id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get security() {
            return pb_1.Message.getWrapperField(this, SecurityFields, 2) as SecurityFields;
        }
        set security(value: SecurityFields) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_security() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            _id?: string;
            security?: ReturnType<typeof SecurityFields.prototype.toObject>;
        }): UpdatePasswordRequest {
            const message = new UpdatePasswordRequest({});
            if (data._id != null) {
                message._id = data._id;
            }
            if (data.security != null) {
                message.security = SecurityFields.fromObject(data.security);
            }
            return message;
        }
        toObject() {
            const data: {
                _id?: string;
                security?: ReturnType<typeof SecurityFields.prototype.toObject>;
            } = {};
            if (this._id != null) {
                data._id = this._id;
            }
            if (this.security != null) {
                data.security = this.security.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this._id.length)
                writer.writeString(1, this._id);
            if (this.has_security)
                writer.writeMessage(2, this.security, () => this.security.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdatePasswordRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdatePasswordRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message._id = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.security, () => message.security = SecurityFields.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdatePasswordRequest {
            return UpdatePasswordRequest.deserialize(bytes);
        }
    }
    export class UpdatePasswordResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            success?: boolean;
        }): UpdatePasswordResponse {
            const message = new UpdatePasswordResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdatePasswordResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdatePasswordResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdatePasswordResponse {
            return UpdatePasswordResponse.deserialize(bytes);
        }
    }
    export class DeleteUserRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            _id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("_id" in data && data._id != undefined) {
                    this._id = data._id;
                }
            }
        }
        get _id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set _id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            _id?: string;
        }): DeleteUserRequest {
            const message = new DeleteUserRequest({});
            if (data._id != null) {
                message._id = data._id;
            }
            return message;
        }
        toObject() {
            const data: {
                _id?: string;
            } = {};
            if (this._id != null) {
                data._id = this._id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this._id.length)
                writer.writeString(1, this._id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteUserRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteUserRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message._id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteUserRequest {
            return DeleteUserRequest.deserialize(bytes);
        }
    }
    export class DeleteUserResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            success?: boolean;
        }): DeleteUserResponse {
            const message = new DeleteUserResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteUserResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteUserResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteUserResponse {
            return DeleteUserResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedUserServiceService {
        static definition = {
            Register: {
                path: "/user_package.UserService/Register",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: RegisterRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => RegisterRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: User) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => User.deserialize(new Uint8Array(bytes))
            },
            Login: {
                path: "/user_package.UserService/Login",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: LoginRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => LoginRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: LoginResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => LoginResponse.deserialize(new Uint8Array(bytes))
            },
            GetUsers: {
                path: "/user_package.UserService/GetUsers",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetUsersRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetUsersRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetUsersResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetUsersResponse.deserialize(new Uint8Array(bytes))
            },
            UpdateUser: {
                path: "/user_package.UserService/UpdateUser",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UpdateUserRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UpdateUserRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: User) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => User.deserialize(new Uint8Array(bytes))
            },
            UpdatePassword: {
                path: "/user_package.UserService/UpdatePassword",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UpdatePasswordRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UpdatePasswordRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: UpdatePasswordResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => UpdatePasswordResponse.deserialize(new Uint8Array(bytes))
            },
            DeleteUser: {
                path: "/user_package.UserService/DeleteUser",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: DeleteUserRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => DeleteUserRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: DeleteUserResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => DeleteUserResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract Register(call: grpc_1.ServerUnaryCall<RegisterRequest, User>, callback: grpc_1.sendUnaryData<User>): void;
        abstract Login(call: grpc_1.ServerUnaryCall<LoginRequest, LoginResponse>, callback: grpc_1.sendUnaryData<LoginResponse>): void;
        abstract GetUsers(call: grpc_1.ServerUnaryCall<GetUsersRequest, GetUsersResponse>, callback: grpc_1.sendUnaryData<GetUsersResponse>): void;
        abstract UpdateUser(call: grpc_1.ServerUnaryCall<UpdateUserRequest, User>, callback: grpc_1.sendUnaryData<User>): void;
        abstract UpdatePassword(call: grpc_1.ServerUnaryCall<UpdatePasswordRequest, UpdatePasswordResponse>, callback: grpc_1.sendUnaryData<UpdatePasswordResponse>): void;
        abstract DeleteUser(call: grpc_1.ServerUnaryCall<DeleteUserRequest, DeleteUserResponse>, callback: grpc_1.sendUnaryData<DeleteUserResponse>): void;
    }
    export class UserServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedUserServiceService.definition, "UserService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        Register: GrpcUnaryServiceInterface<RegisterRequest, User> = (message: RegisterRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<User>, options?: grpc_1.CallOptions | grpc_1.requestCallback<User>, callback?: grpc_1.requestCallback<User>): grpc_1.ClientUnaryCall => {
            return super.Register(message, metadata, options, callback);
        };
        Login: GrpcUnaryServiceInterface<LoginRequest, LoginResponse> = (message: LoginRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<LoginResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<LoginResponse>, callback?: grpc_1.requestCallback<LoginResponse>): grpc_1.ClientUnaryCall => {
            return super.Login(message, metadata, options, callback);
        };
        GetUsers: GrpcUnaryServiceInterface<GetUsersRequest, GetUsersResponse> = (message: GetUsersRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetUsersResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetUsersResponse>, callback?: grpc_1.requestCallback<GetUsersResponse>): grpc_1.ClientUnaryCall => {
            return super.GetUsers(message, metadata, options, callback);
        };
        UpdateUser: GrpcUnaryServiceInterface<UpdateUserRequest, User> = (message: UpdateUserRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<User>, options?: grpc_1.CallOptions | grpc_1.requestCallback<User>, callback?: grpc_1.requestCallback<User>): grpc_1.ClientUnaryCall => {
            return super.UpdateUser(message, metadata, options, callback);
        };
        UpdatePassword: GrpcUnaryServiceInterface<UpdatePasswordRequest, UpdatePasswordResponse> = (message: UpdatePasswordRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<UpdatePasswordResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<UpdatePasswordResponse>, callback?: grpc_1.requestCallback<UpdatePasswordResponse>): grpc_1.ClientUnaryCall => {
            return super.UpdatePassword(message, metadata, options, callback);
        };
        DeleteUser: GrpcUnaryServiceInterface<DeleteUserRequest, DeleteUserResponse> = (message: DeleteUserRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<DeleteUserResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<DeleteUserResponse>, callback?: grpc_1.requestCallback<DeleteUserResponse>): grpc_1.ClientUnaryCall => {
            return super.DeleteUser(message, metadata, options, callback);
        };
    }
}
