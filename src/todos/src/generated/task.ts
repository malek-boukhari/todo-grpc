/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.12.4
 * source: task.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./category";
import * as dependency_2 from "./user";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace task_package {
    export class Task extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            _id?: string;
            title?: string;
            description?: string;
            user?: string;
            collaborators?: string[];
            todos?: string[];
            category?: string;
            createdAt?: string;
            updatedAt?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [5, 6], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("_id" in data && data._id != undefined) {
                    this._id = data._id;
                }
                if ("title" in data && data.title != undefined) {
                    this.title = data.title;
                }
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
                if ("user" in data && data.user != undefined) {
                    this.user = data.user;
                }
                if ("collaborators" in data && data.collaborators != undefined) {
                    this.collaborators = data.collaborators;
                }
                if ("todos" in data && data.todos != undefined) {
                    this.todos = data.todos;
                }
                if ("category" in data && data.category != undefined) {
                    this.category = data.category;
                }
                if ("createdAt" in data && data.createdAt != undefined) {
                    this.createdAt = data.createdAt;
                }
                if ("updatedAt" in data && data.updatedAt != undefined) {
                    this.updatedAt = data.updatedAt;
                }
            }
        }
        get _id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set _id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get title() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set title(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get description() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set description(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get user() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set user(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get collaborators() {
            return pb_1.Message.getFieldWithDefault(this, 5, []) as string[];
        }
        set collaborators(value: string[]) {
            pb_1.Message.setField(this, 5, value);
        }
        get todos() {
            return pb_1.Message.getFieldWithDefault(this, 6, []) as string[];
        }
        set todos(value: string[]) {
            pb_1.Message.setField(this, 6, value);
        }
        get category() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set category(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get createdAt() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set createdAt(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get updatedAt() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set updatedAt(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        static fromObject(data: {
            _id?: string;
            title?: string;
            description?: string;
            user?: string;
            collaborators?: string[];
            todos?: string[];
            category?: string;
            createdAt?: string;
            updatedAt?: string;
        }): Task {
            const message = new Task({});
            if (data._id != null) {
                message._id = data._id;
            }
            if (data.title != null) {
                message.title = data.title;
            }
            if (data.description != null) {
                message.description = data.description;
            }
            if (data.user != null) {
                message.user = data.user;
            }
            if (data.collaborators != null) {
                message.collaborators = data.collaborators;
            }
            if (data.todos != null) {
                message.todos = data.todos;
            }
            if (data.category != null) {
                message.category = data.category;
            }
            if (data.createdAt != null) {
                message.createdAt = data.createdAt;
            }
            if (data.updatedAt != null) {
                message.updatedAt = data.updatedAt;
            }
            return message;
        }
        toObject() {
            const data: {
                _id?: string;
                title?: string;
                description?: string;
                user?: string;
                collaborators?: string[];
                todos?: string[];
                category?: string;
                createdAt?: string;
                updatedAt?: string;
            } = {};
            if (this._id != null) {
                data._id = this._id;
            }
            if (this.title != null) {
                data.title = this.title;
            }
            if (this.description != null) {
                data.description = this.description;
            }
            if (this.user != null) {
                data.user = this.user;
            }
            if (this.collaborators != null) {
                data.collaborators = this.collaborators;
            }
            if (this.todos != null) {
                data.todos = this.todos;
            }
            if (this.category != null) {
                data.category = this.category;
            }
            if (this.createdAt != null) {
                data.createdAt = this.createdAt;
            }
            if (this.updatedAt != null) {
                data.updatedAt = this.updatedAt;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this._id.length)
                writer.writeString(1, this._id);
            if (this.title.length)
                writer.writeString(2, this.title);
            if (this.description.length)
                writer.writeString(3, this.description);
            if (this.user.length)
                writer.writeString(4, this.user);
            if (this.collaborators.length)
                writer.writeRepeatedString(5, this.collaborators);
            if (this.todos.length)
                writer.writeRepeatedString(6, this.todos);
            if (this.category.length)
                writer.writeString(7, this.category);
            if (this.createdAt.length)
                writer.writeString(8, this.createdAt);
            if (this.updatedAt.length)
                writer.writeString(9, this.updatedAt);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Task {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Task();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message._id = reader.readString();
                        break;
                    case 2:
                        message.title = reader.readString();
                        break;
                    case 3:
                        message.description = reader.readString();
                        break;
                    case 4:
                        message.user = reader.readString();
                        break;
                    case 5:
                        pb_1.Message.addToRepeatedField(message, 5, reader.readString());
                        break;
                    case 6:
                        pb_1.Message.addToRepeatedField(message, 6, reader.readString());
                        break;
                    case 7:
                        message.category = reader.readString();
                        break;
                    case 8:
                        message.createdAt = reader.readString();
                        break;
                    case 9:
                        message.updatedAt = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Task {
            return Task.deserialize(bytes);
        }
    }
    export class PopulatedTask extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            _id?: string;
            title?: string;
            description?: string;
            user?: string;
            collaborators?: dependency_2.user_package.User[];
            todos?: string[];
            category?: dependency_1.category_package.Category;
            createdAt?: string;
            updatedAt?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [5, 6], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("_id" in data && data._id != undefined) {
                    this._id = data._id;
                }
                if ("title" in data && data.title != undefined) {
                    this.title = data.title;
                }
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
                if ("user" in data && data.user != undefined) {
                    this.user = data.user;
                }
                if ("collaborators" in data && data.collaborators != undefined) {
                    this.collaborators = data.collaborators;
                }
                if ("todos" in data && data.todos != undefined) {
                    this.todos = data.todos;
                }
                if ("category" in data && data.category != undefined) {
                    this.category = data.category;
                }
                if ("createdAt" in data && data.createdAt != undefined) {
                    this.createdAt = data.createdAt;
                }
                if ("updatedAt" in data && data.updatedAt != undefined) {
                    this.updatedAt = data.updatedAt;
                }
            }
        }
        get _id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set _id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get title() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set title(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get description() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set description(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get user() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set user(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get collaborators() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_2.user_package.User, 5) as dependency_2.user_package.User[];
        }
        set collaborators(value: dependency_2.user_package.User[]) {
            pb_1.Message.setRepeatedWrapperField(this, 5, value);
        }
        get todos() {
            return pb_1.Message.getFieldWithDefault(this, 6, []) as string[];
        }
        set todos(value: string[]) {
            pb_1.Message.setField(this, 6, value);
        }
        get category() {
            return pb_1.Message.getWrapperField(this, dependency_1.category_package.Category, 7) as dependency_1.category_package.Category;
        }
        set category(value: dependency_1.category_package.Category) {
            pb_1.Message.setWrapperField(this, 7, value);
        }
        get has_category() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get createdAt() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set createdAt(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get updatedAt() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set updatedAt(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        static fromObject(data: {
            _id?: string;
            title?: string;
            description?: string;
            user?: string;
            collaborators?: ReturnType<typeof dependency_2.user_package.User.prototype.toObject>[];
            todos?: string[];
            category?: ReturnType<typeof dependency_1.category_package.Category.prototype.toObject>;
            createdAt?: string;
            updatedAt?: string;
        }): PopulatedTask {
            const message = new PopulatedTask({});
            if (data._id != null) {
                message._id = data._id;
            }
            if (data.title != null) {
                message.title = data.title;
            }
            if (data.description != null) {
                message.description = data.description;
            }
            if (data.user != null) {
                message.user = data.user;
            }
            if (data.collaborators != null) {
                message.collaborators = data.collaborators.map(item => dependency_2.user_package.User.fromObject(item));
            }
            if (data.todos != null) {
                message.todos = data.todos;
            }
            if (data.category != null) {
                message.category = dependency_1.category_package.Category.fromObject(data.category);
            }
            if (data.createdAt != null) {
                message.createdAt = data.createdAt;
            }
            if (data.updatedAt != null) {
                message.updatedAt = data.updatedAt;
            }
            return message;
        }
        toObject() {
            const data: {
                _id?: string;
                title?: string;
                description?: string;
                user?: string;
                collaborators?: ReturnType<typeof dependency_2.user_package.User.prototype.toObject>[];
                todos?: string[];
                category?: ReturnType<typeof dependency_1.category_package.Category.prototype.toObject>;
                createdAt?: string;
                updatedAt?: string;
            } = {};
            if (this._id != null) {
                data._id = this._id;
            }
            if (this.title != null) {
                data.title = this.title;
            }
            if (this.description != null) {
                data.description = this.description;
            }
            if (this.user != null) {
                data.user = this.user;
            }
            if (this.collaborators != null) {
                data.collaborators = this.collaborators.map((item: dependency_2.user_package.User) => item.toObject());
            }
            if (this.todos != null) {
                data.todos = this.todos;
            }
            if (this.category != null) {
                data.category = this.category.toObject();
            }
            if (this.createdAt != null) {
                data.createdAt = this.createdAt;
            }
            if (this.updatedAt != null) {
                data.updatedAt = this.updatedAt;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this._id.length)
                writer.writeString(1, this._id);
            if (this.title.length)
                writer.writeString(2, this.title);
            if (this.description.length)
                writer.writeString(3, this.description);
            if (this.user.length)
                writer.writeString(4, this.user);
            if (this.collaborators.length)
                writer.writeRepeatedMessage(5, this.collaborators, (item: dependency_2.user_package.User) => item.serialize(writer));
            if (this.todos.length)
                writer.writeRepeatedString(6, this.todos);
            if (this.has_category)
                writer.writeMessage(7, this.category, () => this.category.serialize(writer));
            if (this.createdAt.length)
                writer.writeString(8, this.createdAt);
            if (this.updatedAt.length)
                writer.writeString(9, this.updatedAt);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PopulatedTask {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PopulatedTask();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message._id = reader.readString();
                        break;
                    case 2:
                        message.title = reader.readString();
                        break;
                    case 3:
                        message.description = reader.readString();
                        break;
                    case 4:
                        message.user = reader.readString();
                        break;
                    case 5:
                        reader.readMessage(message.collaborators, () => pb_1.Message.addToRepeatedWrapperField(message, 5, dependency_2.user_package.User.deserialize(reader), dependency_2.user_package.User));
                        break;
                    case 6:
                        pb_1.Message.addToRepeatedField(message, 6, reader.readString());
                        break;
                    case 7:
                        reader.readMessage(message.category, () => message.category = dependency_1.category_package.Category.deserialize(reader));
                        break;
                    case 8:
                        message.createdAt = reader.readString();
                        break;
                    case 9:
                        message.updatedAt = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PopulatedTask {
            return PopulatedTask.deserialize(bytes);
        }
    }
    export class GetLastUpdatedTasksRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            collaboratorId?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("collaboratorId" in data && data.collaboratorId != undefined) {
                    this.collaboratorId = data.collaboratorId;
                }
            }
        }
        get collaboratorId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set collaboratorId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            collaboratorId?: string;
        }): GetLastUpdatedTasksRequest {
            const message = new GetLastUpdatedTasksRequest({});
            if (data.collaboratorId != null) {
                message.collaboratorId = data.collaboratorId;
            }
            return message;
        }
        toObject() {
            const data: {
                collaboratorId?: string;
            } = {};
            if (this.collaboratorId != null) {
                data.collaboratorId = this.collaboratorId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.collaboratorId.length)
                writer.writeString(1, this.collaboratorId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetLastUpdatedTasksRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetLastUpdatedTasksRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.collaboratorId = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetLastUpdatedTasksRequest {
            return GetLastUpdatedTasksRequest.deserialize(bytes);
        }
    }
    export class GetTasksRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            collaboratorId?: string;
            title?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("collaboratorId" in data && data.collaboratorId != undefined) {
                    this.collaboratorId = data.collaboratorId;
                }
                if ("title" in data && data.title != undefined) {
                    this.title = data.title;
                }
            }
        }
        get collaboratorId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set collaboratorId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get title() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set title(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            collaboratorId?: string;
            title?: string;
        }): GetTasksRequest {
            const message = new GetTasksRequest({});
            if (data.collaboratorId != null) {
                message.collaboratorId = data.collaboratorId;
            }
            if (data.title != null) {
                message.title = data.title;
            }
            return message;
        }
        toObject() {
            const data: {
                collaboratorId?: string;
                title?: string;
            } = {};
            if (this.collaboratorId != null) {
                data.collaboratorId = this.collaboratorId;
            }
            if (this.title != null) {
                data.title = this.title;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.collaboratorId.length)
                writer.writeString(1, this.collaboratorId);
            if (this.title.length)
                writer.writeString(2, this.title);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetTasksRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetTasksRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.collaboratorId = reader.readString();
                        break;
                    case 2:
                        message.title = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetTasksRequest {
            return GetTasksRequest.deserialize(bytes);
        }
    }
    export class GetTasksResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            tasks?: PopulatedTask[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("tasks" in data && data.tasks != undefined) {
                    this.tasks = data.tasks;
                }
            }
        }
        get tasks() {
            return pb_1.Message.getRepeatedWrapperField(this, PopulatedTask, 1) as PopulatedTask[];
        }
        set tasks(value: PopulatedTask[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            tasks?: ReturnType<typeof PopulatedTask.prototype.toObject>[];
        }): GetTasksResponse {
            const message = new GetTasksResponse({});
            if (data.tasks != null) {
                message.tasks = data.tasks.map(item => PopulatedTask.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                tasks?: ReturnType<typeof PopulatedTask.prototype.toObject>[];
            } = {};
            if (this.tasks != null) {
                data.tasks = this.tasks.map((item: PopulatedTask) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.tasks.length)
                writer.writeRepeatedMessage(1, this.tasks, (item: PopulatedTask) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetTasksResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetTasksResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.tasks, () => pb_1.Message.addToRepeatedWrapperField(message, 1, PopulatedTask.deserialize(reader), PopulatedTask));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetTasksResponse {
            return GetTasksResponse.deserialize(bytes);
        }
    }
    export class GetTaskRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            _id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("_id" in data && data._id != undefined) {
                    this._id = data._id;
                }
            }
        }
        get _id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set _id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            _id?: string;
        }): GetTaskRequest {
            const message = new GetTaskRequest({});
            if (data._id != null) {
                message._id = data._id;
            }
            return message;
        }
        toObject() {
            const data: {
                _id?: string;
            } = {};
            if (this._id != null) {
                data._id = this._id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this._id.length)
                writer.writeString(1, this._id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetTaskRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetTaskRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message._id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetTaskRequest {
            return GetTaskRequest.deserialize(bytes);
        }
    }
    export class GetTaskResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            task?: PopulatedTask;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("task" in data && data.task != undefined) {
                    this.task = data.task;
                }
            }
        }
        get task() {
            return pb_1.Message.getWrapperField(this, PopulatedTask, 1) as PopulatedTask;
        }
        set task(value: PopulatedTask) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_task() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            task?: ReturnType<typeof PopulatedTask.prototype.toObject>;
        }): GetTaskResponse {
            const message = new GetTaskResponse({});
            if (data.task != null) {
                message.task = PopulatedTask.fromObject(data.task);
            }
            return message;
        }
        toObject() {
            const data: {
                task?: ReturnType<typeof PopulatedTask.prototype.toObject>;
            } = {};
            if (this.task != null) {
                data.task = this.task.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_task)
                writer.writeMessage(1, this.task, () => this.task.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetTaskResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetTaskResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.task, () => message.task = PopulatedTask.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetTaskResponse {
            return GetTaskResponse.deserialize(bytes);
        }
    }
    export class CreateTaskRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            title?: string;
            description?: string;
            user?: string;
            collaborators?: string[];
            category?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("title" in data && data.title != undefined) {
                    this.title = data.title;
                }
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
                if ("user" in data && data.user != undefined) {
                    this.user = data.user;
                }
                if ("collaborators" in data && data.collaborators != undefined) {
                    this.collaborators = data.collaborators;
                }
                if ("category" in data && data.category != undefined) {
                    this.category = data.category;
                }
            }
        }
        get title() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set title(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get description() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set description(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get user() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set user(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get collaborators() {
            return pb_1.Message.getFieldWithDefault(this, 4, []) as string[];
        }
        set collaborators(value: string[]) {
            pb_1.Message.setField(this, 4, value);
        }
        get category() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set category(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            title?: string;
            description?: string;
            user?: string;
            collaborators?: string[];
            category?: string;
        }): CreateTaskRequest {
            const message = new CreateTaskRequest({});
            if (data.title != null) {
                message.title = data.title;
            }
            if (data.description != null) {
                message.description = data.description;
            }
            if (data.user != null) {
                message.user = data.user;
            }
            if (data.collaborators != null) {
                message.collaborators = data.collaborators;
            }
            if (data.category != null) {
                message.category = data.category;
            }
            return message;
        }
        toObject() {
            const data: {
                title?: string;
                description?: string;
                user?: string;
                collaborators?: string[];
                category?: string;
            } = {};
            if (this.title != null) {
                data.title = this.title;
            }
            if (this.description != null) {
                data.description = this.description;
            }
            if (this.user != null) {
                data.user = this.user;
            }
            if (this.collaborators != null) {
                data.collaborators = this.collaborators;
            }
            if (this.category != null) {
                data.category = this.category;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.title.length)
                writer.writeString(1, this.title);
            if (this.description.length)
                writer.writeString(2, this.description);
            if (this.user.length)
                writer.writeString(3, this.user);
            if (this.collaborators.length)
                writer.writeRepeatedString(4, this.collaborators);
            if (this.category.length)
                writer.writeString(5, this.category);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateTaskRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateTaskRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.title = reader.readString();
                        break;
                    case 2:
                        message.description = reader.readString();
                        break;
                    case 3:
                        message.user = reader.readString();
                        break;
                    case 4:
                        pb_1.Message.addToRepeatedField(message, 4, reader.readString());
                        break;
                    case 5:
                        message.category = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateTaskRequest {
            return CreateTaskRequest.deserialize(bytes);
        }
    }
    export class UpdateTaskRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            _id?: string;
            task?: Task;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("_id" in data && data._id != undefined) {
                    this._id = data._id;
                }
                if ("task" in data && data.task != undefined) {
                    this.task = data.task;
                }
            }
        }
        get _id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set _id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get task() {
            return pb_1.Message.getWrapperField(this, Task, 2) as Task;
        }
        set task(value: Task) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_task() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            _id?: string;
            task?: ReturnType<typeof Task.prototype.toObject>;
        }): UpdateTaskRequest {
            const message = new UpdateTaskRequest({});
            if (data._id != null) {
                message._id = data._id;
            }
            if (data.task != null) {
                message.task = Task.fromObject(data.task);
            }
            return message;
        }
        toObject() {
            const data: {
                _id?: string;
                task?: ReturnType<typeof Task.prototype.toObject>;
            } = {};
            if (this._id != null) {
                data._id = this._id;
            }
            if (this.task != null) {
                data.task = this.task.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this._id.length)
                writer.writeString(1, this._id);
            if (this.has_task)
                writer.writeMessage(2, this.task, () => this.task.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateTaskRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateTaskRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message._id = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.task, () => message.task = Task.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateTaskRequest {
            return UpdateTaskRequest.deserialize(bytes);
        }
    }
    export class DeleteTaskRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            _id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("_id" in data && data._id != undefined) {
                    this._id = data._id;
                }
            }
        }
        get _id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set _id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            _id?: string;
        }): DeleteTaskRequest {
            const message = new DeleteTaskRequest({});
            if (data._id != null) {
                message._id = data._id;
            }
            return message;
        }
        toObject() {
            const data: {
                _id?: string;
            } = {};
            if (this._id != null) {
                data._id = this._id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this._id.length)
                writer.writeString(1, this._id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteTaskRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteTaskRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message._id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteTaskRequest {
            return DeleteTaskRequest.deserialize(bytes);
        }
    }
    export class DeleteTaskResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            success?: boolean;
        }): DeleteTaskResponse {
            const message = new DeleteTaskResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteTaskResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteTaskResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteTaskResponse {
            return DeleteTaskResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedTaskServiceService {
        static definition = {
            GetTasks: {
                path: "/task_package.TaskService/GetTasks",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetTasksRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetTasksRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetTasksResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetTasksResponse.deserialize(new Uint8Array(bytes))
            },
            GetLastUpdatedTasks: {
                path: "/task_package.TaskService/GetLastUpdatedTasks",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetLastUpdatedTasksRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetLastUpdatedTasksRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetTasksResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetTasksResponse.deserialize(new Uint8Array(bytes))
            },
            GetTask: {
                path: "/task_package.TaskService/GetTask",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetTaskRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetTaskRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetTaskResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetTaskResponse.deserialize(new Uint8Array(bytes))
            },
            CreateTask: {
                path: "/task_package.TaskService/CreateTask",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CreateTaskRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CreateTaskRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: Task) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => Task.deserialize(new Uint8Array(bytes))
            },
            UpdateTask: {
                path: "/task_package.TaskService/UpdateTask",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UpdateTaskRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UpdateTaskRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: Task) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => Task.deserialize(new Uint8Array(bytes))
            },
            DeleteTask: {
                path: "/task_package.TaskService/DeleteTask",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: DeleteTaskRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => DeleteTaskRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: DeleteTaskResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => DeleteTaskResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract GetTasks(call: grpc_1.ServerUnaryCall<GetTasksRequest, GetTasksResponse>, callback: grpc_1.sendUnaryData<GetTasksResponse>): void;
        abstract GetLastUpdatedTasks(call: grpc_1.ServerUnaryCall<GetLastUpdatedTasksRequest, GetTasksResponse>, callback: grpc_1.sendUnaryData<GetTasksResponse>): void;
        abstract GetTask(call: grpc_1.ServerUnaryCall<GetTaskRequest, GetTaskResponse>, callback: grpc_1.sendUnaryData<GetTaskResponse>): void;
        abstract CreateTask(call: grpc_1.ServerUnaryCall<CreateTaskRequest, Task>, callback: grpc_1.sendUnaryData<Task>): void;
        abstract UpdateTask(call: grpc_1.ServerUnaryCall<UpdateTaskRequest, Task>, callback: grpc_1.sendUnaryData<Task>): void;
        abstract DeleteTask(call: grpc_1.ServerUnaryCall<DeleteTaskRequest, DeleteTaskResponse>, callback: grpc_1.sendUnaryData<DeleteTaskResponse>): void;
    }
    export class TaskServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedTaskServiceService.definition, "TaskService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        GetTasks: GrpcUnaryServiceInterface<GetTasksRequest, GetTasksResponse> = (message: GetTasksRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetTasksResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetTasksResponse>, callback?: grpc_1.requestCallback<GetTasksResponse>): grpc_1.ClientUnaryCall => {
            return super.GetTasks(message, metadata, options, callback);
        };
        GetLastUpdatedTasks: GrpcUnaryServiceInterface<GetLastUpdatedTasksRequest, GetTasksResponse> = (message: GetLastUpdatedTasksRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetTasksResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetTasksResponse>, callback?: grpc_1.requestCallback<GetTasksResponse>): grpc_1.ClientUnaryCall => {
            return super.GetLastUpdatedTasks(message, metadata, options, callback);
        };
        GetTask: GrpcUnaryServiceInterface<GetTaskRequest, GetTaskResponse> = (message: GetTaskRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetTaskResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetTaskResponse>, callback?: grpc_1.requestCallback<GetTaskResponse>): grpc_1.ClientUnaryCall => {
            return super.GetTask(message, metadata, options, callback);
        };
        CreateTask: GrpcUnaryServiceInterface<CreateTaskRequest, Task> = (message: CreateTaskRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Task>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Task>, callback?: grpc_1.requestCallback<Task>): grpc_1.ClientUnaryCall => {
            return super.CreateTask(message, metadata, options, callback);
        };
        UpdateTask: GrpcUnaryServiceInterface<UpdateTaskRequest, Task> = (message: UpdateTaskRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Task>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Task>, callback?: grpc_1.requestCallback<Task>): grpc_1.ClientUnaryCall => {
            return super.UpdateTask(message, metadata, options, callback);
        };
        DeleteTask: GrpcUnaryServiceInterface<DeleteTaskRequest, DeleteTaskResponse> = (message: DeleteTaskRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<DeleteTaskResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<DeleteTaskResponse>, callback?: grpc_1.requestCallback<DeleteTaskResponse>): grpc_1.ClientUnaryCall => {
            return super.DeleteTask(message, metadata, options, callback);
        };
    }
}
