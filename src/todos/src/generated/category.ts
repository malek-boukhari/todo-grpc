/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.12.4
 * source: category.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace category_package {
    export class Category extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            _id?: string;
            name?: string;
            color?: string;
            user?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("_id" in data && data._id != undefined) {
                    this._id = data._id;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("color" in data && data.color != undefined) {
                    this.color = data.color;
                }
                if ("user" in data && data.user != undefined) {
                    this.user = data.user;
                }
            }
        }
        get _id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set _id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get color() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set color(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get user() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set user(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            _id?: string;
            name?: string;
            color?: string;
            user?: string;
        }): Category {
            const message = new Category({});
            if (data._id != null) {
                message._id = data._id;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.color != null) {
                message.color = data.color;
            }
            if (data.user != null) {
                message.user = data.user;
            }
            return message;
        }
        toObject() {
            const data: {
                _id?: string;
                name?: string;
                color?: string;
                user?: string;
            } = {};
            if (this._id != null) {
                data._id = this._id;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.color != null) {
                data.color = this.color;
            }
            if (this.user != null) {
                data.user = this.user;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this._id.length)
                writer.writeString(1, this._id);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.color.length)
                writer.writeString(3, this.color);
            if (this.user.length)
                writer.writeString(4, this.user);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Category {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Category();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message._id = reader.readString();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.color = reader.readString();
                        break;
                    case 4:
                        message.user = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Category {
            return Category.deserialize(bytes);
        }
    }
    export class GetCategoriesRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            userId?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("userId" in data && data.userId != undefined) {
                    this.userId = data.userId;
                }
            }
        }
        get userId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set userId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            userId?: string;
        }): GetCategoriesRequest {
            const message = new GetCategoriesRequest({});
            if (data.userId != null) {
                message.userId = data.userId;
            }
            return message;
        }
        toObject() {
            const data: {
                userId?: string;
            } = {};
            if (this.userId != null) {
                data.userId = this.userId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.userId.length)
                writer.writeString(1, this.userId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetCategoriesRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetCategoriesRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.userId = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetCategoriesRequest {
            return GetCategoriesRequest.deserialize(bytes);
        }
    }
    export class GetCategoriesResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            categories?: Category[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("categories" in data && data.categories != undefined) {
                    this.categories = data.categories;
                }
            }
        }
        get categories() {
            return pb_1.Message.getRepeatedWrapperField(this, Category, 1) as Category[];
        }
        set categories(value: Category[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            categories?: ReturnType<typeof Category.prototype.toObject>[];
        }): GetCategoriesResponse {
            const message = new GetCategoriesResponse({});
            if (data.categories != null) {
                message.categories = data.categories.map(item => Category.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                categories?: ReturnType<typeof Category.prototype.toObject>[];
            } = {};
            if (this.categories != null) {
                data.categories = this.categories.map((item: Category) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.categories.length)
                writer.writeRepeatedMessage(1, this.categories, (item: Category) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetCategoriesResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetCategoriesResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.categories, () => pb_1.Message.addToRepeatedWrapperField(message, 1, Category.deserialize(reader), Category));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetCategoriesResponse {
            return GetCategoriesResponse.deserialize(bytes);
        }
    }
    export class CreateCategoryRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            color?: string;
            user?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("color" in data && data.color != undefined) {
                    this.color = data.color;
                }
                if ("user" in data && data.user != undefined) {
                    this.user = data.user;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get color() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set color(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get user() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set user(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            name?: string;
            color?: string;
            user?: string;
        }): CreateCategoryRequest {
            const message = new CreateCategoryRequest({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.color != null) {
                message.color = data.color;
            }
            if (data.user != null) {
                message.user = data.user;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                color?: string;
                user?: string;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.color != null) {
                data.color = this.color;
            }
            if (this.user != null) {
                data.user = this.user;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.color.length)
                writer.writeString(2, this.color);
            if (this.user.length)
                writer.writeString(3, this.user);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateCategoryRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateCategoryRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.color = reader.readString();
                        break;
                    case 3:
                        message.user = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateCategoryRequest {
            return CreateCategoryRequest.deserialize(bytes);
        }
    }
    export class UpdateCategoryRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            _id?: string;
            category?: Category;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("_id" in data && data._id != undefined) {
                    this._id = data._id;
                }
                if ("category" in data && data.category != undefined) {
                    this.category = data.category;
                }
            }
        }
        get _id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set _id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get category() {
            return pb_1.Message.getWrapperField(this, Category, 2) as Category;
        }
        set category(value: Category) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_category() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            _id?: string;
            category?: ReturnType<typeof Category.prototype.toObject>;
        }): UpdateCategoryRequest {
            const message = new UpdateCategoryRequest({});
            if (data._id != null) {
                message._id = data._id;
            }
            if (data.category != null) {
                message.category = Category.fromObject(data.category);
            }
            return message;
        }
        toObject() {
            const data: {
                _id?: string;
                category?: ReturnType<typeof Category.prototype.toObject>;
            } = {};
            if (this._id != null) {
                data._id = this._id;
            }
            if (this.category != null) {
                data.category = this.category.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this._id.length)
                writer.writeString(1, this._id);
            if (this.has_category)
                writer.writeMessage(2, this.category, () => this.category.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateCategoryRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateCategoryRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message._id = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.category, () => message.category = Category.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateCategoryRequest {
            return UpdateCategoryRequest.deserialize(bytes);
        }
    }
    export class DeleteCategoryRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            _id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("_id" in data && data._id != undefined) {
                    this._id = data._id;
                }
            }
        }
        get _id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set _id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            _id?: string;
        }): DeleteCategoryRequest {
            const message = new DeleteCategoryRequest({});
            if (data._id != null) {
                message._id = data._id;
            }
            return message;
        }
        toObject() {
            const data: {
                _id?: string;
            } = {};
            if (this._id != null) {
                data._id = this._id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this._id.length)
                writer.writeString(1, this._id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteCategoryRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteCategoryRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message._id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteCategoryRequest {
            return DeleteCategoryRequest.deserialize(bytes);
        }
    }
    export class DeleteCategoryResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            success?: boolean;
        }): DeleteCategoryResponse {
            const message = new DeleteCategoryResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteCategoryResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteCategoryResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteCategoryResponse {
            return DeleteCategoryResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedCategoryServiceService {
        static definition = {
            GetCategories: {
                path: "/category_package.CategoryService/GetCategories",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetCategoriesRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetCategoriesRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetCategoriesResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetCategoriesResponse.deserialize(new Uint8Array(bytes))
            },
            CreateCategory: {
                path: "/category_package.CategoryService/CreateCategory",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CreateCategoryRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CreateCategoryRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: Category) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => Category.deserialize(new Uint8Array(bytes))
            },
            UpdateCategory: {
                path: "/category_package.CategoryService/UpdateCategory",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UpdateCategoryRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UpdateCategoryRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: Category) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => Category.deserialize(new Uint8Array(bytes))
            },
            DeleteCategory: {
                path: "/category_package.CategoryService/DeleteCategory",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: DeleteCategoryRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => DeleteCategoryRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: DeleteCategoryResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => DeleteCategoryResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract GetCategories(call: grpc_1.ServerUnaryCall<GetCategoriesRequest, GetCategoriesResponse>, callback: grpc_1.sendUnaryData<GetCategoriesResponse>): void;
        abstract CreateCategory(call: grpc_1.ServerUnaryCall<CreateCategoryRequest, Category>, callback: grpc_1.sendUnaryData<Category>): void;
        abstract UpdateCategory(call: grpc_1.ServerUnaryCall<UpdateCategoryRequest, Category>, callback: grpc_1.sendUnaryData<Category>): void;
        abstract DeleteCategory(call: grpc_1.ServerUnaryCall<DeleteCategoryRequest, DeleteCategoryResponse>, callback: grpc_1.sendUnaryData<DeleteCategoryResponse>): void;
    }
    export class CategoryServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedCategoryServiceService.definition, "CategoryService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        GetCategories: GrpcUnaryServiceInterface<GetCategoriesRequest, GetCategoriesResponse> = (message: GetCategoriesRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetCategoriesResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetCategoriesResponse>, callback?: grpc_1.requestCallback<GetCategoriesResponse>): grpc_1.ClientUnaryCall => {
            return super.GetCategories(message, metadata, options, callback);
        };
        CreateCategory: GrpcUnaryServiceInterface<CreateCategoryRequest, Category> = (message: CreateCategoryRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Category>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Category>, callback?: grpc_1.requestCallback<Category>): grpc_1.ClientUnaryCall => {
            return super.CreateCategory(message, metadata, options, callback);
        };
        UpdateCategory: GrpcUnaryServiceInterface<UpdateCategoryRequest, Category> = (message: UpdateCategoryRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Category>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Category>, callback?: grpc_1.requestCallback<Category>): grpc_1.ClientUnaryCall => {
            return super.UpdateCategory(message, metadata, options, callback);
        };
        DeleteCategory: GrpcUnaryServiceInterface<DeleteCategoryRequest, DeleteCategoryResponse> = (message: DeleteCategoryRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<DeleteCategoryResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<DeleteCategoryResponse>, callback?: grpc_1.requestCallback<DeleteCategoryResponse>): grpc_1.ClientUnaryCall => {
            return super.DeleteCategory(message, metadata, options, callback);
        };
    }
}
